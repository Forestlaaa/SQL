# SQL+python notes
* SQL 是用filter 条件对整个表（或者self-join)进行操作，不是单独针对行或列的操作

* 记住，要取某一列最小值或最大值所在的行只能这样写：
        SELECT * FROM Candidate
            WHERE A = (SELECT MIN(A)/MAX(A) FROM Vote) 或者用in
* group by 1 means to group by the first column of your result set regardless of what it's called. You can do the same with ORDER BY .
* Use IS NULL 或反过来弄掉不满足条件的其他行 not in （不满足条件的编号）
* COUNT(column_name) 函数返回指定列的值的数目（NULL 不计入）
* The HAVING clause was added to SQL because the WHERE keyword cannot be used with aggregate functions.
* lag(列名, n, default) OVER()往前取n行，lead()往后取n行
* SQL没有%求余，只有MOD(a, b),可以当作filter condition
* 怎么数group by后组内行数是不是大于某数，用HAVING COUNT(*) > x

1. (512) To retrieve the first row(record) after group by:  
    - Use windown function 
        这个新创造一列取某一列的第一个值
        FIRST_VALUE(A.device_id) OVER (
           PARTITION BY A.player_id
           ORDER BY A.event_date)
    - ⭐另外一种思路是获取最小的row index，在SQL里是间接找到其他列对应的行，然后用WHERE IN 来获取其他列
        SELECT player_id, device_id FROM Activity 
          WHERE (player_id, event_date) IN (
              SELECT player_id, MIN(event_date) FROM Activity GROUP BY player_id)
    - Using python:
        .idxmin() can return the index of first occurrence of minimum over requested axis (axis = 0 as default)
        df = activity.loc[activity.groupby('player_id')['event_date'].idxmin()][['player_id','device_id']]

2.（534) How to realize group cumulative sum?
  - window function SUM() OVER(PARTITION BY .. ORDER BY..)
      SUM(games_played) over(partition by player_id order by event_date) as games_played_so_far
  p.s. SUM() OVER(PARTITON BY) could only realize group sum, not cumulative
  p.s.s About sliding window aggregation, for example, 统计每组近三个月的销售情况
        包含统计月：
        - SUM(gmv) OVER(partition by team_name order by month range between 2 prece


ding and 0 following)  
       or SUM(gmv) OVER(partition by team_name order by month range between 2 preceding and current row)
        不包含统计月：
        - range between 3 preceding and 1 preceding
        or range between 3 preceding and -1 following
  - Using pandas: groupby().transform(pd.Series.cumsum)
        df["games_played_so_far"] = df.groupby("player_id")["games_played"].transform(pd.Series.cumsum)

3. (550) 分组挑选出日期只相差一天的运动员与所有运动员之间的比例
    - First, when it refers to date difference: use DATEDIFF()
    - use window function: DATEDIFF(event_date, MIN(event_date) OVER(PARTITION BY player_id)) = 1, 用上等于1把新产生的这一列变成一个只有1/0的判断列，可以帮助之后算fraction
    - 因为不能像python一样很方便的记录下来player_id的总数量，所以用第二条新的一列作为中介记录

    SELECT ROUND(SUM(login)/COUNT(DISTINCT player_id), 2) AS fraction
    FROM (
      SELECT
        player_id,
        DATEDIFF(event_date, MIN(event_date) OVER(PARTITION BY player_id)) = 1 AS login
      FROM Activity
    ) AS t

    - p.s. 我想的方法更复杂一点，我先想把日期列分组往前挪一个，然后两列做差得到日期之间的间隔，用上lag()/lead()， 跟上一个最优方法还是很类似的
        SELECT player_id, DATEDIFF(event_date,  
        lag(event_date, 1, "1900-01-01") OVER(partition by player_id order by event_date))=1 as temp
    FROM Activity
    - use DATE_SUB() 函数从日期减去指定的时间间隔

4. hard 571. Find Median Given Frequency of Numbers
with a as (
    select number,
           sum(frequency) over (order by number) - frequency as lower_num,
           sum(frequency) over (order by number) as upper_num,
           sum(frequency) over () / 2 as medium_num
    from numbers 
)

select avg(number) as median
from a
where medium_num between lower_num and upper_num

5. How to get the first row of the dataframe?
问题： 如果在SELECT处用count() AS X, 在order by处能用X吗
在结尾加上 LIMIT 1
SELECT customer_number
FROM Orders
GROUP BY customer_number
ORDER BY COUNT(order_number) DESC LIMIT 1

6(consecutive type). lag()/lead()重做一遍603
    #180.
    方法一：
    SELECT distinct Num as ConsecutiveNums
    FROM Logs
    WHERE (Id + 1, Num) in (select * from Logs) and (Id + 2, Num) in (select * from Logs)
    方法二：
    SELECT distinct(t1.num) as ConsecutiveNums 
    FROM logs t1, logs t2 , logs t3
    WHERE t1.id=t2.id+1 AND t2.id=t3.id+1 AND t1.num=t2.num AND t2.num=t3.num


7. MySQL如何获得第n行的数据
  https://blog.csdn.net/belief_009/article/details/123507018
  https://deepinout.com/sql/sql-questions/123_sql_how_do_i_get_the_nth_row_in_a_sql_server_table.html#:~:text=SQL%20%E5%A6%82%E4%BD%95%E8%8E%B7%E5%BE%97%20SQL%20Server%20%E8%A1%A8%E4%B8%AD%E7%9A%84%E7%AC%ACn%E8%A1%8C%201%20%E4%B8%80%E3%80%81%E4%BD%BF%E7%94%A8%20OFFSET,TOP%E3%80%81%E4%BB%A5%E5%8F%8A%20ROW_NUMBER%20%E5%87%BD%E6%95%B0%EF%BC%8C%E6%88%91%E4%BB%AC%E5%8F%AF%E4%BB%A5%E5%9C%A8%20SQL%20Server%20%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%AD%E8%8E%B7%E5%8F%96%E8%A1%A8%E7%9A%84%E7%AC%ACn%E8%A1%8C%E3%80%82%20%E6%AF%8F%E7%A7%8D%E6%96%B9%E6%B3%95%E9%83%BD%E6%9C%89%E5%85%B6%E9%80%82%E7%94%A8%E7%9A%84%E5%9C%BA%E6%99%AF%EF%BC%8C%E6%88%91%E4%BB%AC%E5%8F%AF%E4%BB%A5%E6%A0%B9%E6%8D%AE%E5%85%B7%E4%BD%93%E6%83%85%E5%86%B5%E6%9D%A5%E9%80%89%E6%8B%A9%E5%90%88%E9%80%82%E7%9A%84%E6%96%B9%E6%B3%95%E3%80%82%20
  https://www.begtut.com/mysql/mysql-nth_value-function.html
    - LIMIT 1 OFFSET N-1
    - LIMIT 1, N-1
    - LIMIT N-1, 1
    #177.
        CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT
        BEGIN
        SET N = N - 1;
          RETURN (
                IFNULL((SELECT DISTINCT(salary)
                FROM Employee
                ORDER BY salary DESC
                LIMIT N, 1), NULL)
                #LIMIT 1 OFFSET N - 1
        );
        END

8. 重写184， 最主要是where里面那个() 


in
SELECT D.name as Department, E.name AS Employee, E.salary as Salary
FROM Employee E
LEFT JOIN Department D
on E.departmentId = D.id
WHERE (E.departmentID, E.salary) in
(SELECT departmentId, MAX(salary)
FROM Employee 
GROUP BY departmentId)

8. 排序问题 比如取分组后某一列最大值/最小值对应的行
    RANK(), DENSE_RANK(), ROW_NUMBER() OVER(PARTITION BY 一个或多个分组列 ORDER BY 一个或多个排序列) 用逗号间隔开来
    - RANK() 并列跳跃排名，相同的值保留重复名次， 遇到下一个不同值时， 跳跃到总共的排名
    - DENSE_RANK() 并列连续排名，相同的值保留重复名次， 遇到下一个不同值时，依然按照连续数字排名
    - ROW_NUMBER() 连续排名
    # 注意as后面的列别名如果是数据库的关键字,那么需要这个别名用引号引起来,否则会报错

158 用到 DENSE_RANK()
1077 用到DENSE_RANK()
SELECT project_id, employee_id
FROM
    (SELECT P.project_id, P.employee_id, DENSE_RANK() OVER(PARTITION BY P.project_id ORDER BY E.experience_years DESC) AS rnk
    FROM Project P
    JOIN Employee E
    ON P.employee_id = E.employee_id) T
WHERE rnk = 1
⭐还可以用subquery来做：
select p.project_id, p.employee_id
from Project p join Employee e
on p.employee_id = e.employee_id
where (p.project_id, e.experience_years) in (
    select a.project_id, max(b.experience_years)
    from Project a join Employee b
    on a.employee_id = b.employee_id
    group by a.project_id)

9. 10/31/2023 重做574
-不会的时候就用 with x as () 弄一个临时表,然后再从这个临时表里面query

10. 10/31/2023 重做578
# count()
* COUNT(column_name) 函数返回指定列的值的数目（NULL 不计入）
* COUNT(DISTINCT column_name) 函数返回指定列的不同值的数目
11/4 重做578 solution:
The answer rate for a question is the number of times a user answered the question by the number of times a user showed the question.
Write a solution to report the question that has the highest answer rate. If multiple questions have the same maximum answer rate, report the question with the smallest question_id.
Input: 
SurveyLog table:
+----+--------+-------------+-----------+-------+-----------+
| id | action | question_id | answer_id | q_num | timestamp |
+----+--------+-------------+-----------+-------+-----------+
| 5  | show   | 285         | null      | 1     | 123       |
| 5  | answer | 285         | 124124    | 1     | 124       |
| 5  | show   | 369         | null      | 2     | 125       |
| 5  | skip   | 369         | null      | 2     | 126       |
+----+--------+-------------+-----------+-------+-----------+
Output: 
+------------+
| survey_log |
+------------+
| 285        |
+------------+
# 算出answer_rate, 按answer rate 排序]一步完成
# My answer: 不需要group by question_id, count()本来就会计算每个id里不一样的值, 不需要嵌套表
SELECT question_id AS survey_log FROM
(SELECT *, count(answer_id)/(count(question_id)/2) as answer_rate
FROM SurveyLog
GROUP BY id, question_id) AS T
ORDER BY answer_rate DESC, question_id ASC LIMIT 1

# Other answer: study the case when usage in count(), remember using NULL; while using my (count(question_id)/2) as denominator will be optimized
SELECT  question_id as survey_log
FROM SurveyLog
GROUP BY 1
ORDER BY (count(answer_id) / count(case when action = 'show' then question_id ELSE null end )) desc, 1 asc
LIMIT 1

11.10/31/2023 重做579
Write a solution to calculate the cumulative salary summary for every employee in a single unified table.

The cumulative salary summary for an employee can be calculated as follows:

For each month that the employee worked, sum up the salaries in that month and the previous two months. This is their 3-month sum for that month. If an employee did not work for the company in previous months, their effective salary for those months is 0.
Do not include the 3-month sum for the most recent month that the employee worked for in the summary.
Do not include the 3-month sum for any month the employee did not work.
Return the result table ordered by id in ascending order. In case of a tie, order it by month in descending order.
The result format is in the following example.
Example 1:

Input: 
Employee table:
+----+-------+--------+
| id | month | salary |
+----+-------+--------+
| 1  | 1     | 20     |
| 2  | 1     | 20     |
| 1  | 2     | 30     |
| 2  | 2     | 30     |
| 3  | 2     | 40     |
| 1  | 3     | 40     |
| 3  | 3     | 60     |
| 1  | 4     | 60     |
| 3  | 4     | 70     |
| 1  | 7     | 90     |
| 1  | 8     | 90     |
+----+-------+--------+
Output: 
+----+-------+--------+
| id | month | Salary |
+----+-------+--------+
| 1  | 7     | 90     |
| 1  | 4     | 130    |
| 1  | 3     | 90     |
| 1  | 2     | 50     |
| 1  | 1     | 20     |
| 2  | 1     | 20     |
| 3  | 3     | 100    |
| 3  | 2     | 40     |
+----+-------+--------+

首先，我想到了要用sliding windows，但是我不知道要怎么筛掉每组最后一行
**重复出现，就像之前的答案用上where (两列) in 筛选条件一样，这里用where not in 去筛掉出现的最后一个月
SELECT id, month, SUM(salary) OVER(partition by id order by month range between 2 preceding and current row) AS Salary
FROM Employee
WHERE (id, month) not in (SELECT id, MAX(month) AS month FROM Employee GROUP BY id)
order by id, month DESC

另一种方法，self-join
**首先用self join把表cross join起来，这样A表每个id的每一个月都会重复出现出现在summary的月；
**因为是3-month sum，所以这时候用AND B.Month BETWEEN (A.Month-3) AND (A.Month-1)条件来摆脱不想要的行
**我比较谨慎用group by 是因为经常只返回group的第一行
SELECT   A.Id, MAX(B.Month) as Month, SUM(B.Salary) as Salary
FROM     Employee A, Employee B
WHERE    A.Id = B.Id AND B.Month BETWEEN (A.Month-3) AND (A.Month-1)
GROUP BY A.Id, A.Month
ORDER BY Id, Month DESC

12. 11/4/2023 重做585
Write a solution to report the sum of all total investment values in 2016 tiv_2016, for all policyholders who:

have the same tiv_2015 value as one or more other policyholders, and
are not located in the same city as any other policyholder (i.e., the (lat, lon) attribute pairs must be unique).
Round tiv_2016 to two decimal places.

The result format is in the following example.
Input: 
Insurance table:
+-----+----------+----------+-----+-----+
| pid | tiv_2015 | tiv_2016 | lat | lon |
+-----+----------+----------+-----+-----+
| 1   | 10       | 5        | 10  | 10  |
| 2   | 20       | 20       | 20  | 20  |
| 3   | 10       | 30       | 20  | 20  |
| 4   | 10       | 40       | 40  | 40  |
+-----+----------+----------+-----+-----+
Output: 
+----------+
| tiv_2016 |
+----------+
| 45.00    |
+----------+
实际上不难，但是我忘记了HAVING()所以兜了一个大圈子:(
* The HAVING clause was added to SQL because the WHERE keyword cannot be used with aggregate functions.
# MY Logic: 有两个筛选条件 1. tiv_2015出现的次数大于一;2. 一定要是不同的城市（全表范围内）
# MY solution: 因为忘记了HAVING所以用window function算tiv_2015出现的次数
SELECT ROUND(SUM(tiv_2016), 2) AS tiv_2016
FROM
(SELECT *, COUNT(tiv_2015) OVER(PARTITION BY tiv_2015 ORDER BY tiv_2015) as appear_time
FROM Insurance) AS T
WHERE appear_time > 1 AND pid not in (SELECT A.pid FROM Insurance A, Insurance B WHERE (A.pid <> B.pid AND A.lat = B.lat AND A.lon = B.lon))

# Optimized solution:
SELECT ROUND(SUM(tiv_2016), 2) AS tiv_2016
FROM Insurance
WHERE tiv_2015 IN (
    SELECT tiv_2015
    FROM Insurance
    GROUP BY tiv_2015
    HAVING COUNT(*) > 1
)
AND (lat, lon) IN (
    SELECT lat, lon
    FROM Insurance
    GROUP BY lat, lon
    HAVING COUNT(*) = 1
)

602. 11/4/2023 重做
Write a solution to find the people who have the most friends and the most friends number.
The test cases are generated so that only one person has the most friends.
The result format is in the following example.
Input: 
RequestAccepted table:
+--------------+-------------+-------------+
| requester_id | accepter_id | accept_date |
+--------------+-------------+-------------+
| 1            | 2           | 2016/06/03  |
| 1            | 3           | 2016/06/08  |
| 2            | 3           | 2016/06/08  |
| 3            | 4           | 2016/06/09  |
+--------------+-------------+-------------+
Output: 
+----+-----+
| id | num |
+----+-----+
| 3  | 3   |
+----+-----+
#逻辑没有问题，有一个地方不知道怎么实现 用UNION()
# My logic: 1. to find the id who has the largest sum of request and accept times, use UNION() to bring the two columns together
* The UNION operator is used to combine the result-set of two or more SELECT statements.
# 再次重申：这里不能select MAX(count(id)) Invalid use of group function
SELECT id, count(id) AS NUM
FROM
(SELECT requester_id id from RequestAccepted
union all
select accepter_id id from RequestAccepted) AS T
group by id
ORDER BY count(id) DESC LIMIT 1

13. 11/5/2023 重做601 consecutive有关，逻辑
Write a solution to display the records with three or more rows with consecutive id's, and the number of people is greater than or equal to 100 for each.
Return the result table ordered by visit_date in ascending order.
The result format is in the following example.
Input: 
Stadium table:
+------+------------+-----------+
| id   | visit_date | people    |
+------+------------+-----------+
| 1    | 2017-01-01 | 10        |
| 2    | 2017-01-02 | 109       |
| 3    | 2017-01-03 | 150       |
| 4    | 2017-01-04 | 99        |
| 5    | 2017-01-05 | 145       |
| 6    | 2017-01-06 | 1455      |
| 7    | 2017-01-07 | 199       |
| 8    | 2017-01-09 | 188       |
+------+------------+-----------+
Output: 
+------+------------+-----------+
| id   | visit_date | people    |
+------+------------+-----------+
| 5    | 2017-01-05 | 145       |
| 6    | 2017-01-06 | 1455      |
| 7    | 2017-01-07 | 199       |
| 8    | 2017-01-09 | 188       |
+------+------------+-----------+
* ROW_NUMBER() OVER() 类似rank()
#Solution:
SELECT id, visit_date, people
FROM
(SELECT *, COUNT(*) OVER (PARTITION BY island) AS cnt 
FROM 
(SELECT *, id - ROW_NUMBER() OVER (ORDER BY id) AS island
FROM Stadium
WHERE people >= 100) AS T
)AS T1
WHERE cnt >= 3
ORDER BY visit_date

14. 11/5/2023 603 consecutive相关，用上了上一门的逻辑，好用！
# Solution 1:
SELECT seat_id
FROM 
(SELECT *, COUNT(*) OVER(PARTITION BY flag) AS cne
FROM 
(SELECT *, seat_id - ROW_NUMBER() OVER(ORDER BY seat_id) as flag
FROM Cinema
WHERE free <> 0) AS subquery) AS subquery2
WHERE cne >= 2
ORDER BY seat_id

# Solution 2: 这个也要学到，通过seat_id在一个subquery里面，但是如果要求consecutive更多的话还是Solution1最为直接方便
SELECT seat_id
FROM cinema
WHERE free = 1 AND (
    seat_id - 1 IN (SELECT seat_id FROM cinema WHERE free = 1)
    OR
    seat_id + 1 IN (SELECT seat_id FROM cinema WHERE free = 1)
);

# Solution 3: 用上lag()/lead() 同样很直接，但是限制就是只能在consecutive比较少的条件下才能用
SELECT
    seat_id
FROM
    (SELECT
        seat_id,
        free,
        LAG(free,1) OVER (ORDER BY seat_id) as free_lag,
        LEAD(free,1) OVER (ORDER BY seat_id) as free_lead
    FROM cinema ) as t
WHERE (free=1 AND free_lag=1)
OR (free=1 AND free_lead=1)
;

1083. 根据某一列进行条件筛选型，其中one id may have multiple records
两种方法：CASE WHEN(), 进行subquery
# CASE WHEN()
SELECT s.buyer_id
FROM Sales AS s INNER JOIN Product AS p
ON s.product_id = p.product_id
GROUP BY s.buyer_id
HAVING SUM(CASE WHEN p.product_name = 'S8' THEN 1 ELSE 0 END) > 0
AND SUM(CASE WHEN p.product_name = 'iPhone' THEN 1 ELSE 0 END) = 0

# subquery
SELECT DISTINCT S.buyer_id AS buyer_id
FROM Product P
RIGHT JOIN Sales S
on P.product_id = S.product_id
WHERE P.product_name = 'S8' and S.buyer_id not in(
    SELECT S.buyer_id
    FROM Product P
    RIGHT JOIN Sales S
    on P.product_id = S.product_id
    WHERE P.product_name = 'iphone'
)

⭐1097.当有多种需求的时候
The install date of a player is the first login day of that player.

We define day one retention of some date x to be the number of players whose install date is x and they logged back in on the day right after x, divided by the number of players whose install date is x, rounded to 2 decimal places.

Write a solution to report for each install date, the number of players that installed the game on that day, and the day one retention.

Return the result table in any order.

The result format is in the following example.

 

Example 1:

Input: 
Activity table:
+-----------+-----------+------------+--------------+
| player_id | device_id | event_date | games_played |
+-----------+-----------+------------+--------------+
| 1         | 2         | 2016-03-01 | 5            |
| 1         | 2         | 2016-03-02 | 6            |
| 2         | 3         | 2017-06-25 | 1            |
| 3         | 1         | 2016-03-01 | 0            |
| 3         | 4         | 2016-07-03 | 5            |
+-----------+-----------+------------+--------------+
Output: 
+------------+----------+----------------+
| install_dt | installs | Day1_retention |
+------------+----------+----------------+
| 2016-03-01 | 2        | 0.50           |
| 2017-06-25 | 1        | 0.00           |
+------------+----------+----------------+
# MIN OVER()
SELECT
install_dt,
COUNT(DISTINCT player_id) installs,
ROUND(SUM(event_date = install_dt + INTERVAL 1 DAY) / COUNT(DISTINCT player_id),2) Day1_retention
FROM
(SELECT *, MIN(event_date) OVER(PARTITION BY player_id ORDER BY event_date) install_dt FROM activity) temp
GROUP BY 1

# subquery
select A.event_date as install_dt, count(A.player_id) as installs, round(count(B.player_id)/count(A.player_id),2) as Day1_retention
from (select player_id, min(event_date) AS event_date from Activity group by player_id) AS A
left join Activity B
ON A.player_id = B.player_id
and A.event_date + 1 = B.event_Date
group by A.event_date

# 262 hard
# 注意SUM(IF())组合写法
SELECT request_at AS Day, round(SUM(IF(Status = 'completed', 0, 1))/COUNT(*), 2) AS 'Cancellation Rate'
FROM Trips
Where client_id NOT IN (SELECT users_id FROM Users where banned='Yes')
AND driver_id NOT IN (SELECT users_id FROM Users where banned='Yes')
AND request_at between "2013-10-01" AND "2013-10-03"
GROUP BY request_at
